=============
    Opus
=============
Welcome to Opus. The Open Source Services Management Platform.

-----------
Source Tree
-----------
Here's a rundown on what you've just downloaded:

opus/
    Python package containing all of the Opus Python code.

opus/project/
    The Opus Django project, which contains the primary frontend interface to
    the project builder, deployer, and scaler.

opus/lib/
    Contains Opus supporting libraries and code for applications to use.

opus/lib/builder/
    The Django project building code.

opus/lib/deployer/
    The Django project deployment code

opus/lib/conf/
    The code that manipulates settings of Django projects

opus/lib/prov/
    Provisioning related libraries

src/
    The supporting C code used by the deployer to do certain privileged
    operations.

------------
Requirements
------------
Opus in its current form requires:

* Python 2.6 or greater (not 3.x)
* Django 1.2 or greater
* Apache
* mod_wsgi
* Linux

Additional requirements will be needed for the other components, as they are
written and added. For example, the scaling code may require:

* Deltacloud
* Postgresql
* Psycopg2
* memcached
* python-memcached
* celery
* RabbitMQ
* possibly more

----------
Installing
----------
As this project is in heavy development, the installation procedure isn't set
in stone just yet. Here are some general installation guidelines.

Clone this repository somewhere. You have probably already done this unless
you're browsing the source online.

Below, there are several references to the "Opus user." This refers to the
system user that the Opus application will be running as. It is important to
know this so that permissions are set up correctly and securly. This user will
usually be the same user Apache runs as, typically "apache." However, for
increased security mod_wsgi can be configured to run projects as a different
user. If you wish to do this, see the mod_wsgi documentation. This is how Opus
configures the projects it deploys, but isn't necessary for Opus itself.

The next step is to deploy the Django project located at opus/project in the
source. To do that, first configure it:

* Copy the settings.py.sample to settings.py
* Configure the necessary settings in there. At a minimum, you'll need to set:

  * DATABASE parameters
  * SECRET_KEY (set this to a random string of characters around 50 characters
    long)
  * Set the TEMPLATE_DIRS to the absolute path to the opus/project/templates
    directory
  * Set OPUS_BASE_DIR to the directory where Opus will create projects into
    and deploy projects from. This will need to be writable by the Opus user.
  * Set OPUS_APACHE_CONFD to the directory where Opus should drop apache
    configuration files for the projects it deploys. It will need to be a
    directory writable by the Opus user, readable by Apache, and Apache needs to be
    configured to include all conf files in it.
  * Set OPUS_SECUREOPS_COMMAND to the path where the secureops binary is
    located. This is compiled from the source files in the src/ directory of
    the Opus source. It must be owned by root and have permissions 4750 and the
    Opus user must have permissions to execute it.
  * Set LOG_DIR to the directory where Opus should put its log files. The
    directory needs to exist and be writable by the Opus user.

Don't forget to make the base directory, log directory, and apache conf
directory writable by the Opus user.

Now sync the database by calling `manage.py syncdb`. If using an sqlite
database, either run the sync as the Opus user, or make sure the sqlite database
file is writable by the Opus user. Remember that sqlite uses temporary files,
so write access to the directory containing the sqlite database is also
required. You must create a directory just for the database and give write
access to the user Opus is using to be completely secure (so that unprivileged
users cannot snoop on the temporary files sqlite uses)

After the project is configured, it needs to be deployed. This is the typical
deployment procedure outlined in the `Django Deployment Guide`_.  For
convenience, here is a sample wsgi file that will need to be created::

    import os
    import sys

    os.environ['DJANGO_SETTINGS_MODULE'] = 'opus.project.settings'

    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()

The Opus package must be on the Python path for the project to run. If Opus
isn't installed to a system location, or if Opus isn't on your Python path some
other way, then you'll need to add a line such as the following::

    sys.path.insert(0, "/opt/opus-repository")

To be clear, this is the path to the directory *containing* the "opus"
directory, which is the Opus package. In the above example, the opus package
would be /opt/opus-repository/opus, and /opt/opus-repository is the repository
containing this README, the opus package, setup.py, and such.

Once your wsgi file is in place, Apache must be configured to run this app.
Follow your normal procedure for deploying a Django app with mod_wsgi, see
the `Django Deployment Guide`_ for help.

 .. _Django Deployment Guide: http://docs.djangoproject.com/en/1.2/howto/deployment/modwsgi/
